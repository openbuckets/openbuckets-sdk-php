<?php
/**
 * FilesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openbuckets.io
 */

/**
 * OpenBuckets API
 *
 * The OpenBuckets web-based tool is a powerful utility that allows users to quickly locate open buckets in cloud storage systems through a simple query. In addition, it provides a convenient way to search for various file types across these open buckets, making it an essential tool for security professionals, researchers, and anyone interested in discovering exposed data. This Postman collection aims to showcase the capabilities of OpenBuckets by providing a set of API requests that demonstrate how to leverage its features. By following this collection, you'll learn how to utilize OpenBuckets to identify open buckets and search for specific file types within them.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openbuckets.io
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openbuckets.io).
 * https://openbuckets.io
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * FilesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openbuckets.io
 */
class FilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'searchFiles' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation searchFiles
     *
     * Search Files
     *
     * @param  string $keywords multiple keywords. - denotes stop keywords (optional)
     * @param  string $order the sorting field for the search results (e.g., \&quot;size\&quot;, \&quot;last_modified\&quot;) (optional)
     * @param  string $direction the sorting direction for the search results (e.g., \&quot;desc\&quot; for descending) (optional)
     * @param  string $full_path include the full path in the search results (1 for true, 0 for false) (optional)
     * @param  string $extensions comma-separated list of file extensions to include (e.g., \&quot;pdf,env\&quot;) (optional)
     * @param  string $last_modified_from UNIX timestamp for the starting date of the last modification range (optional)
     * @param  string $last_modified_to UNIX timestamp for the ending date of the last modification rang (optional)
     * @param  string $size_from minimum file size in bytes (optional)
     * @param  string $size_to maximum file size in bytes (optional)
     * @param  string $start starting index for pagination (optional)
     * @param  string $limit number of search results to return per page (optional)
     * @param  string $exclude_buckets comma-separated list of bucket IDs to exclude from the search (optional)
     * @param  string $regexp use regular expression for the search (true or false) (optional)
     * @param  string $noautocorrect disable autocorrection in the search query (true or false) (optional)
     * @param  string $buckets filter search results to specific bucket IDs (optional)
     * @param  string $stop_extensions comma-separated list of file extensions to exclude (optional)
     * @param  string $paging_mode pagination mode (e.g., \&quot;offset\&quot; for offset-based) (optional)
     * @param  string $search_after token to continue a scroll-based search (optional)
     * @param  string $scroll_id scroll ID for a continuation of a scroll-based search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchFiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FileSearchResults
     */
    public function searchFiles($keywords = null, $order = null, $direction = null, $full_path = null, $extensions = null, $last_modified_from = null, $last_modified_to = null, $size_from = null, $size_to = null, $start = null, $limit = null, $exclude_buckets = null, $regexp = null, $noautocorrect = null, $buckets = null, $stop_extensions = null, $paging_mode = null, $search_after = null, $scroll_id = null, string $contentType = self::contentTypes['searchFiles'][0])
    {
        list($response) = $this->searchFilesWithHttpInfo($keywords, $order, $direction, $full_path, $extensions, $last_modified_from, $last_modified_to, $size_from, $size_to, $start, $limit, $exclude_buckets, $regexp, $noautocorrect, $buckets, $stop_extensions, $paging_mode, $search_after, $scroll_id, $contentType);
        return $response;
    }

    /**
     * Operation searchFilesWithHttpInfo
     *
     * Search Files
     *
     * @param  string $keywords multiple keywords. - denotes stop keywords (optional)
     * @param  string $order the sorting field for the search results (e.g., \&quot;size\&quot;, \&quot;last_modified\&quot;) (optional)
     * @param  string $direction the sorting direction for the search results (e.g., \&quot;desc\&quot; for descending) (optional)
     * @param  string $full_path include the full path in the search results (1 for true, 0 for false) (optional)
     * @param  string $extensions comma-separated list of file extensions to include (e.g., \&quot;pdf,env\&quot;) (optional)
     * @param  string $last_modified_from UNIX timestamp for the starting date of the last modification range (optional)
     * @param  string $last_modified_to UNIX timestamp for the ending date of the last modification rang (optional)
     * @param  string $size_from minimum file size in bytes (optional)
     * @param  string $size_to maximum file size in bytes (optional)
     * @param  string $start starting index for pagination (optional)
     * @param  string $limit number of search results to return per page (optional)
     * @param  string $exclude_buckets comma-separated list of bucket IDs to exclude from the search (optional)
     * @param  string $regexp use regular expression for the search (true or false) (optional)
     * @param  string $noautocorrect disable autocorrection in the search query (true or false) (optional)
     * @param  string $buckets filter search results to specific bucket IDs (optional)
     * @param  string $stop_extensions comma-separated list of file extensions to exclude (optional)
     * @param  string $paging_mode pagination mode (e.g., \&quot;offset\&quot; for offset-based) (optional)
     * @param  string $search_after token to continue a scroll-based search (optional)
     * @param  string $scroll_id scroll ID for a continuation of a scroll-based search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchFiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FileSearchResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchFilesWithHttpInfo($keywords = null, $order = null, $direction = null, $full_path = null, $extensions = null, $last_modified_from = null, $last_modified_to = null, $size_from = null, $size_to = null, $start = null, $limit = null, $exclude_buckets = null, $regexp = null, $noautocorrect = null, $buckets = null, $stop_extensions = null, $paging_mode = null, $search_after = null, $scroll_id = null, string $contentType = self::contentTypes['searchFiles'][0])
    {
        $request = $this->searchFilesRequest($keywords, $order, $direction, $full_path, $extensions, $last_modified_from, $last_modified_to, $size_from, $size_to, $start, $limit, $exclude_buckets, $regexp, $noautocorrect, $buckets, $stop_extensions, $paging_mode, $search_after, $scroll_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FileSearchResults' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FileSearchResults' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FileSearchResults', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FileSearchResults';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FileSearchResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchFilesAsync
     *
     * Search Files
     *
     * @param  string $keywords multiple keywords. - denotes stop keywords (optional)
     * @param  string $order the sorting field for the search results (e.g., \&quot;size\&quot;, \&quot;last_modified\&quot;) (optional)
     * @param  string $direction the sorting direction for the search results (e.g., \&quot;desc\&quot; for descending) (optional)
     * @param  string $full_path include the full path in the search results (1 for true, 0 for false) (optional)
     * @param  string $extensions comma-separated list of file extensions to include (e.g., \&quot;pdf,env\&quot;) (optional)
     * @param  string $last_modified_from UNIX timestamp for the starting date of the last modification range (optional)
     * @param  string $last_modified_to UNIX timestamp for the ending date of the last modification rang (optional)
     * @param  string $size_from minimum file size in bytes (optional)
     * @param  string $size_to maximum file size in bytes (optional)
     * @param  string $start starting index for pagination (optional)
     * @param  string $limit number of search results to return per page (optional)
     * @param  string $exclude_buckets comma-separated list of bucket IDs to exclude from the search (optional)
     * @param  string $regexp use regular expression for the search (true or false) (optional)
     * @param  string $noautocorrect disable autocorrection in the search query (true or false) (optional)
     * @param  string $buckets filter search results to specific bucket IDs (optional)
     * @param  string $stop_extensions comma-separated list of file extensions to exclude (optional)
     * @param  string $paging_mode pagination mode (e.g., \&quot;offset\&quot; for offset-based) (optional)
     * @param  string $search_after token to continue a scroll-based search (optional)
     * @param  string $scroll_id scroll ID for a continuation of a scroll-based search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchFilesAsync($keywords = null, $order = null, $direction = null, $full_path = null, $extensions = null, $last_modified_from = null, $last_modified_to = null, $size_from = null, $size_to = null, $start = null, $limit = null, $exclude_buckets = null, $regexp = null, $noautocorrect = null, $buckets = null, $stop_extensions = null, $paging_mode = null, $search_after = null, $scroll_id = null, string $contentType = self::contentTypes['searchFiles'][0])
    {
        return $this->searchFilesAsyncWithHttpInfo($keywords, $order, $direction, $full_path, $extensions, $last_modified_from, $last_modified_to, $size_from, $size_to, $start, $limit, $exclude_buckets, $regexp, $noautocorrect, $buckets, $stop_extensions, $paging_mode, $search_after, $scroll_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchFilesAsyncWithHttpInfo
     *
     * Search Files
     *
     * @param  string $keywords multiple keywords. - denotes stop keywords (optional)
     * @param  string $order the sorting field for the search results (e.g., \&quot;size\&quot;, \&quot;last_modified\&quot;) (optional)
     * @param  string $direction the sorting direction for the search results (e.g., \&quot;desc\&quot; for descending) (optional)
     * @param  string $full_path include the full path in the search results (1 for true, 0 for false) (optional)
     * @param  string $extensions comma-separated list of file extensions to include (e.g., \&quot;pdf,env\&quot;) (optional)
     * @param  string $last_modified_from UNIX timestamp for the starting date of the last modification range (optional)
     * @param  string $last_modified_to UNIX timestamp for the ending date of the last modification rang (optional)
     * @param  string $size_from minimum file size in bytes (optional)
     * @param  string $size_to maximum file size in bytes (optional)
     * @param  string $start starting index for pagination (optional)
     * @param  string $limit number of search results to return per page (optional)
     * @param  string $exclude_buckets comma-separated list of bucket IDs to exclude from the search (optional)
     * @param  string $regexp use regular expression for the search (true or false) (optional)
     * @param  string $noautocorrect disable autocorrection in the search query (true or false) (optional)
     * @param  string $buckets filter search results to specific bucket IDs (optional)
     * @param  string $stop_extensions comma-separated list of file extensions to exclude (optional)
     * @param  string $paging_mode pagination mode (e.g., \&quot;offset\&quot; for offset-based) (optional)
     * @param  string $search_after token to continue a scroll-based search (optional)
     * @param  string $scroll_id scroll ID for a continuation of a scroll-based search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchFilesAsyncWithHttpInfo($keywords = null, $order = null, $direction = null, $full_path = null, $extensions = null, $last_modified_from = null, $last_modified_to = null, $size_from = null, $size_to = null, $start = null, $limit = null, $exclude_buckets = null, $regexp = null, $noautocorrect = null, $buckets = null, $stop_extensions = null, $paging_mode = null, $search_after = null, $scroll_id = null, string $contentType = self::contentTypes['searchFiles'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FileSearchResults';
        $request = $this->searchFilesRequest($keywords, $order, $direction, $full_path, $extensions, $last_modified_from, $last_modified_to, $size_from, $size_to, $start, $limit, $exclude_buckets, $regexp, $noautocorrect, $buckets, $stop_extensions, $paging_mode, $search_after, $scroll_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchFiles'
     *
     * @param  string $keywords multiple keywords. - denotes stop keywords (optional)
     * @param  string $order the sorting field for the search results (e.g., \&quot;size\&quot;, \&quot;last_modified\&quot;) (optional)
     * @param  string $direction the sorting direction for the search results (e.g., \&quot;desc\&quot; for descending) (optional)
     * @param  string $full_path include the full path in the search results (1 for true, 0 for false) (optional)
     * @param  string $extensions comma-separated list of file extensions to include (e.g., \&quot;pdf,env\&quot;) (optional)
     * @param  string $last_modified_from UNIX timestamp for the starting date of the last modification range (optional)
     * @param  string $last_modified_to UNIX timestamp for the ending date of the last modification rang (optional)
     * @param  string $size_from minimum file size in bytes (optional)
     * @param  string $size_to maximum file size in bytes (optional)
     * @param  string $start starting index for pagination (optional)
     * @param  string $limit number of search results to return per page (optional)
     * @param  string $exclude_buckets comma-separated list of bucket IDs to exclude from the search (optional)
     * @param  string $regexp use regular expression for the search (true or false) (optional)
     * @param  string $noautocorrect disable autocorrection in the search query (true or false) (optional)
     * @param  string $buckets filter search results to specific bucket IDs (optional)
     * @param  string $stop_extensions comma-separated list of file extensions to exclude (optional)
     * @param  string $paging_mode pagination mode (e.g., \&quot;offset\&quot; for offset-based) (optional)
     * @param  string $search_after token to continue a scroll-based search (optional)
     * @param  string $scroll_id scroll ID for a continuation of a scroll-based search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchFilesRequest($keywords = null, $order = null, $direction = null, $full_path = null, $extensions = null, $last_modified_from = null, $last_modified_to = null, $size_from = null, $size_to = null, $start = null, $limit = null, $exclude_buckets = null, $regexp = null, $noautocorrect = null, $buckets = null, $stop_extensions = null, $paging_mode = null, $search_after = null, $scroll_id = null, string $contentType = self::contentTypes['searchFiles'][0])
    {





















        $resourcePath = '/api/v2/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keywords,
            'keywords', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $full_path,
            'full-path', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $extensions,
            'extensions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_modified_from,
            'last-modified-from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_modified_to,
            'last-modified-to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size_from,
            'size-from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size_to,
            'size-to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_buckets,
            'excludeBuckets', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $regexp,
            'regexp', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $noautocorrect,
            'noautocorrect', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $buckets,
            'buckets', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stop_extensions,
            'stopExtensions', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paging_mode,
            'pagingMode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_after,
            'searchAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scroll_id,
            'scrollId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
